import org.apache.commons.io.FilenameUtils;
import org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator;
import org.deeplearning4j.eval.Evaluation;
import org.deeplearning4j.nn.api.Layer;
import org.deeplearning4j.nn.conf.BackpropType;
import org.deeplearning4j.nn.conf.ComputationGraphConfiguration;
import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.*;
import org.deeplearning4j.nn.graph.ComputationGraph;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.api.IterationListener;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.nd4j.evaluation.classification.EvaluationCalibration;
import org.nd4j.evaluation.classification.ROC;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.buffer.DataType;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.api.ops.impl.layers.convolution.config.Pooling2DConfig;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.dataset.SplitTestAndTrain;
import org.nd4j.linalg.dataset.api.preprocessor.NormalizerMinMaxScaler;
import org.nd4j.linalg.dataset.api.preprocessor.NormalizerStandardize;
import org.nd4j.linalg.learning.config.Adam;
import org.nd4j.linalg.lossfunctions.LossFunctions;

public class HandwrittenDigitRecognition {

    public static void main(String[] args) throws Exception {
        int batchSize = 64;
        int numClasses = 10;
        int numFeatures = 784;
        int numHiddenNodes = 128;
        int numEpochs = 10;

        // Load MNIST dataset
        MnistDataSetIterator mnistTrain = new MnistDataSetIterator(batchSize, true, 12345);
        MnistDataSetIterator mnistTest = new MnistDataSetIterator(batchSize, false, 12345);

        // Create a configuration for the neural network
        MultiLayerConfiguration config = new NeuralNetConfiguration.Builder()
            .seed(123)
            .weightInit(WeightInit.XAVIER)
            .updater(new Adam(0.001))
            .list()
            .layer(new DenseLayer.Builder()
                .nIn(numFeatures)
                .nOut(numHiddenNodes)
                .activation(Activation.RELU)
                .build())
            .layer(new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                .nIn(numHiddenNodes)
                .nOut(numClasses)
                .activation(Activation.SOFTMAX)
                .build())
            .build();

        // Create the multi-layer network
        MultiLayerNetwork model = new MultiLayerNetwork(config);
        model.init();
        model.setListeners(new ScoreIterationListener(10));

        // Normalize data
        NormalizerMinMaxScaler scaler = new NormalizerMinMaxScaler(0, 1);
        scaler.fit(mnistTrain);
        scaler.transform(mnistTrain);
        scaler.transform(mnistTest);

        // Train the model
        for (int i = 0; i < numEpochs; i++) {
            model.fit(mnistTrain);
        }

        // Evaluate the model
        Evaluation evaluation = model.evaluate(mnistTest);

        // Make predictions using the trained model
        INDArray inputFeatures = mnistTest.next().getFeatures();
        INDArray predictions = model.output(inputFeatures);
    }
}
